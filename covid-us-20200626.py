# -*- coding: utf-8 -*-
"""Covid US - 06-26-2020.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1clzEYluTwyd05SQmAeXTXXnL_P-Y1-So
"""

# Commented out IPython magic to ensure Python compatibility.
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"
 
import numpy as np, pandas as pd, matplotlib.pyplot as plt, seaborn as sns
# %matplotlib inline
from scipy import stats
from datetime import datetime
 
pd.options.mode.chained_assignment = None  # default='warn'
pd.set_option('display.max_rows', 200)
 
csvFile = 'https://covidtracking.com/api/v1/us/daily.csv'
df = pd.read_csv(csvFile)
 
# below columns are depreciated
df = df.drop(['deathIncrease', 'hospitalized', 'hospitalizedIncrease',
              'lastModified', 'negativeIncrease', 'posNeg',
              'positiveIncrease', 'total', 'totalTestResults'], axis=1)
 
# smaller dataset to work with - all states
df1 = df[['date', 'positive', 'negative', 'death',
          'hospitalizedCurrently', 'hospitalizedCumulative']].copy()

def graph():
  dftmp = df1

  dfDiff = dftmp['positive'].diff()
  dfDiff = dfDiff.fillna(0).to_frame()
  dfDiff.columns = ['posDiff']
  dftmp = dftmp.join(dfDiff)
 
  dfDeath = dftmp['death'].diff()
  dfDeath = dfDeath.fillna(0).to_frame()
  dfDeath.columns = ['deathDiff']
  dftmp = dftmp.join(dfDeath)
 
  pDMax = min(dftmp['posDiff'])                # used to graph: y-limit for scaling,
  dDMax = min(dftmp['deathDiff'])              #                reference lines, text
 
  pD = pDMax * -1
  dD = dDMax * -1
 
  # get shorter timeframe
  dfSmol = dftmp.loc[dftmp['date'] <= 20200515]

  pDMax1 = min(dfSmol['posDiff'])                # used to graph: y-limit for scaling,
  dDMax1 = min(dfSmol['deathDiff'])              #                reference lines, text
 
  pD1 = pDMax1 * -1
  dD1 = dDMax1 * -1 
  # ---------------- PLOT ----------------
  ax = plt.gca()
  ax.axes.xaxis.set_visible(False)              # [8]
  ax.axes.yaxis.set_visible(False)

  # Header, Source
  plt.text(0.5, .9, 'US', horizontalalignment='center',\
       verticalalignment='center', transform=ax.transAxes, fontsize=24)        # [9]
  plt.text(2,dDMax-1500,'Source: https://covidtracking.com', fontsize=12)
 
  # plot first peak positive cases
  plt.hlines(xmin=0, xmax=94, y=-pDMax1, colors='r', linestyles='dashed')
  plt.text(12, -pDMax1+500, f'{pD1} Positive Cases', fontsize=14, va='bottom')
  plt.text(12, -pDMax1-250, 'First Peak', fontsize=14, va='top')
 
  # plot first peak deaths
  plt.hlines(xmin=0, xmax=98, y=dDMax1, colors='k', linestyles='dashed')
  plt.text(10, dDMax1+500, f'{dD1} Deaths', fontsize=1)
 
  # plot current peak positive cases
  plt.hlines(xmin=0, xmax=250, y=-pDMax, colors='r', linestyles='dashed')
  plt.text(10, -pDMax+500, f'{pD} Positive Cases', fontsize=14, va='bottom')
 
  # plot current peak deaths
  plt.hlines(xmin=0, xmax=250, y=dDMax, colors='k', linestyles='dashed')
  plt.text(10, dDMax+500, f'{dD} Deaths', fontsize=14)
 
  # Divide months on plot
  plt.vlines(x=11, ymin=0, ymax=pD, linestyles='dashed')            # Feb 1
  plt.text(12, pD-500, 'Feb 1', fontsize=10, rotation=90, va='top')
  plt.vlines(x=40, ymin=0, ymax=pD, linestyles='dashed')            # March 1
  plt.text(41, pD-500, 'March 1', fontsize=10, rotation=90, va='top')
  plt.vlines(x=71, ymin=0, ymax=pD, linestyles='dashed')            # April 1
  plt.text(72, pD-500, 'April 1', fontsize=10, rotation=90, va='top')
  plt.vlines(x=101, ymin=0, ymax=pD, linestyles='dashed')           # May 1
  plt.text(102, pD-500, 'May 1', fontsize=10, rotation=90, va='top')
  plt.vlines(x=132, ymin=0, ymax=pD, linestyles='dashed')           # June 1
  plt.text(133, pD-500, 'June 1', fontsize=10, rotation=90, va='top')
  plt.vlines(x=162, ymin=0, ymax=pD, linestyles='dashed')           # July 1
  plt.text(163, pD-500, 'July 1', fontsize=10, rotation=90, va='top')
 
  sns.barplot(x=dftmp['date'], y=-dftmp['posDiff'], color='red');
  sns.barplot(x=dftmp['date'], y=dftmp['deathDiff'], color='k');

plt.subplots(figsize=(20,10))
graph();